/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "maven-publish"

afterEvaluate { project ->
    def isAndroidLibrary = plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')
    def isJavaLibrary = plugins.hasPlugin('java')

    if (isAndroidLibrary) {
        tasks.register('androidJavadocs', Javadoc) {
            failOnError false
            source = android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        tasks.register('androidJavadocsJar', Jar) {
            dependsOn androidJavadocs
            getArchiveClassifier().convention('javadoc')
            getArchiveClassifier().set('javadoc')
            from androidJavadocs.destinationDir
        }

        tasks.register('androidSourcesJar', Jar) {
            getArchiveClassifier().convention('sources')
            getArchiveClassifier().set('sources')
            from android.sourceSets.main.java.source
        }
    } else if (isJavaLibrary) {
        tasks.register('sourcesJar', Jar) {
            dependsOn classes
            getArchiveClassifier().convention('sources')
            getArchiveClassifier().set('sources')
            from sourceSets.main.allSource
        }

        tasks.register('javadocJar', Jar) {
            dependsOn javadoc
            getArchiveClassifier().convention('javadoc')
            getArchiveClassifier().set('javadoc')
            from javadoc.destinationDir
        }
    }

    publishing {
        String versionName = VERSION_NAME
        def isSnapshot = versionName.endsWith('SNAPSHOT')
        publications {
            maven(MavenPublication) {
                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = VERSION_NAME
                afterEvaluate {
                    if (isAndroidLibrary) {
                        from components.release
                        artifact androidSourcesJar
                    } else if (isJavaLibrary) {
                        from components.java
                        artifact sourcesJar
                    }
                }
                repositories {
                    //阿里云私有仓库
                    maven {
                        if (isSnapshot) {
                            name('Snapshot')
                            url 'https://packages.aliyun.com/maven/repository/2356342-snapshot-XRJVDn/'
                        } else {
                            name('Release')
                            url 'https://packages.aliyun.com/maven/repository/2356342-release-jNlzMn/'
                        }
                        credentials {
                            username '601251c54fb2132a19a10e23'
                            password 'CuV[qT5f9sFN'
                        }
                    }
                }
            }
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc).tap {
                configureEach {
                    options.addStringOption('Xdoclint:none', '-quiet')
                }
            }
        }
    }
}
